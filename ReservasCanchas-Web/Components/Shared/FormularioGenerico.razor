@using System.Reflection
@typeparam TItem

<EditForm Model="Model" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="card mb-4">
        <div class="card-header">
            <i class="fas fa-edit me-1"></i>
            @(IsEdit ? $"Editar {typeof(TItem).Name}" : $"Crear {typeof(TItem).Name}")
        </div>
        <div class="card-body">
            @foreach (var prop in Props)
            {
                if (!prop.CanWrite || !prop.CanRead || prop.GetSetMethod() == null || prop.GetGetMethod() == null)
                {
                    continue;
                }

                var propType = Nullable.GetUnderlyingType(prop.PropertyType) ?? prop.PropertyType;
                var displayName = prop.Name;

                <div class="mb-3">
                    <label class="form-label">@displayName</label>
                    @if (propType == typeof(string))
                    {
                        <input class="form-control" value="@GetValueString(prop)" @oninput="e => SetValue(prop, e.Value?.ToString())" />
                    }
                    else if (propType == typeof(int) || propType == typeof(long) || propType == typeof(short))
                    {
                        <input class="form-control" type="number" value="@GetValueString(prop)" @oninput="e => SetValue(prop, e.Value?.ToString())" />
                    }
                    else if (propType == typeof(decimal) || propType == typeof(float) || propType == typeof(double))
                    {
                        <input class="form-control" type="number" step="any" value="@GetValueString(prop)" @oninput="e => SetValue(prop, e.Value?.ToString())" />
                    }
                    else if (propType == typeof(DateTime))
                    {
                        <input class="form-control" type="date" value="@GetValueString(prop)" @oninput="e => SetValue(prop, e.Value?.ToString())" />
                    }
                    else if (propType == typeof(bool))
                    {
                        <input class="form-check-input" type="checkbox" checked="@(GetValueBool(prop) ?? false)" @onchange="e => SetValue(prop, (bool?)((ChangeEventArgs)e).Value ?? false)" />
                    }
                    else
                    {
                        <input class="form-control" value="@GetValueString(prop)" @oninput="e => SetValue(prop, e.Value?.ToString())" />
                    }
                </div> 
            }
        </div>
        <div class="card-footer">
            <button type="submit" class="btn btn-primary me-2">Guardar</button>
            @if (OnCancel.HasDelegate)
            {
                <button type="button" class="btn btn-secondary" @onclick="OnCancel">Cancelar</button>
            }
        </div>
    </div>
</EditForm>